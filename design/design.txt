
For my project I recreated the game of minesweeper and then created AIs to solve the game. Two of the AIs simulate human play. The first AI simulates a human with very little experience and no clue how to play the game. Thus, they simply guess all over the board and die 100% of the time. The next AI simulates a human who understands the logic behind minesweeper. Thus, after guessing for one or two rounds to reveal at least 5% of the board, the AI uses calculations to place flags and win the game. It also completes one to two steps per second, similar to a fast human minesweeper player. Also, this AI can only die in the first few moves as it guesses to reveal a chunk of the board to begin calculations. Finally the last AI plays at a much faster sped than the others and never dies in the guessing phase. Backtracking is used to prevent dying. The fastest recorded time for this AI to solve the expert level board is 16 seconds, far faster than any human has achieved previously (a screenshot can be found in the Minesweeper_112 folder).

My approach to writing the code for the minesweeper game involved two arrays, importing images to place on the canvas based on the values of those arrays, and other supporting functions. Mines are randomly placed throughout the bottomLayer array and the numbers found in some of the cells are generated by calculating the number of mines surrounding that cell. The topLayer array is initialized at 0 for all of its values to create a board full of blank cells. Recursion is used to reveal empty cells throughout the board.

The AI's solving algorithm ranges from a one to four step process. For the low competence AI, only one phase of the algorithm is implemented, the guessing phase. For the other two, the first phase of guessing is needed to reveal 5% of the board, then calculations completed in phases two and three are completed to flag mines and clear cells that have been confidently determined to not contain mines, respectively. Cells are randomly chosen for calculation for the sake of efficiency, as looping through all cells is inefficient. The final phase of the algorithm is used when 90% of the mines have been flagged. In this step, all cells that have not been calculated yet are computed and flagged. 

An interesting rule of minesweeper I discovered is that a player cannot die on the first move, so the mine is moved to the top left corner recursively. If there is already a mine there, then the mine is moved to right of it. It follows this process until it can place it properly, then recalculates the board and finally displays the user's move, which will not be a mine.

Finally the user interface is meant to simulate the actual game of minesweeper as closely as possible. The images used are from the game of minesweeper to provide a realistic minesweeper experience and the scoreboard and timer display are similar to the ones found in a standard minesweeper game found on most Windows computers. A help button is always readily available and a button to toggle AI usage is also present. To restart the game, users simply press the smiling face, much like in the original minesweeper game.